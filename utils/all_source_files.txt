// .eslintrc.json
{
  "extends": "next/core-web-vitals"
}


// .prettierrc.json
{
  "singleQuote": true,
  "trailingComma": "all",
  "printWidth": 100,
  "semi": false
}


// CHANGELOG.md
# alpha.42

**We're now pre-compiling CSS for faster startup times**

We are beginning to optimize the compilation and dev startup performance of Payload 3.0, and the first thing we've done is pre-compiled all SCSS that is required by the Payload admin UI.

If you started before `alpha.42` and update to this version, you'll see that no styles are loaded. To fix this, take a look at the `/src/app/(payload)/layout.tsx` file within this repo, and note that this file has a new CSS import within it to load all CSS required by the Payload admin panel.

Simply add this import to your `(payload)/layout.tsx` file, and you'll be back in business.

**We now load all required Payload static files from your Next.js `public` folder**

In addition to pre-compiling SCSS, we are also shipping static files through the Next.js `/public` folder which will cut down on compilation time as well. Make sure you copy the `public/payload` folder into your repo as well as add the CSS import above.


// components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src\\app\\(app)\\globals.scss",
    "baseColor": "slate",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

// next-env.d.ts
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.


// package.json
{
  "name": "next-latest-starter",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "dev": "cross-env NODE_OPTIONS=--no-deprecation next dev",
    "devturbo": "cross-env NODE_OPTIONS=--no-deprecation next dev --turbo",
    "devsafe": "rm -rf .next && cross-env NODE_OPTIONS=--no-deprecation next dev",
    "build": "cross-env NODE_OPTIONS=--no-deprecation next build",
    "payload": "cross-env NODE_OPTIONS=--no-deprecation payload",
    "start": "cross-env NODE_OPTIONS=--no-deprecation next start",
    "lint": "cross-env NODE_OPTIONS=--no-deprecation next lint",
    "ci": "payload migrate && pnpm build",
    "generate:types": "payload generate:types",
    "standalone-script": "node ./src/scripts/standalone-script.js"
  },
  "engines": {
    "node": "^18.20.2 || >=20.6.0"
  },
  "dependencies": {
    "@payloadcms/db-mongodb": "3.0.0-beta.34",
    "@payloadcms/db-postgres": "3.0.0-beta.34",
    "@payloadcms/next": "3.0.0-beta.34",
    "@payloadcms/richtext-lexical": "3.0.0-beta.34",
    "@payloadcms/richtext-slate": "3.0.0-beta.34",
    "@payloadcms/ui": "3.0.0-beta.34",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "cross-env": "^7.0.3",
    "framer-motion": "^11.2.4",
    "graphql": "^16.8.1",
    "lucide-react": "^0.378.0",
    "next": "14.3.0-canary.68",
    "npm": "^10.8.0",
    "payload": "3.0.0-beta.34",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hot-toast": "^2.4.1",
    "react-icons": "^5.2.1",
    "react-intersection-observer": "^9.10.2",
    "react-vertical-timeline-component": "^3.6.0",
    "sharp": "0.32.6",
    "slate": "^0.103.0",
    "slate-react": "^0.104.0",
    "tailwind-merge": "^2.3.0",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@types/node": "^20.12.12",
    "@types/react": "^18.2.64",
    "@types/react-dom": "^18.2.21",
    "@types/react-vertical-timeline-component": "^3.3.6",
    "autoprefixer": "^10.4.19",
    "dotenv": "^16.4.5",
    "eslint": "^8.57.0",
    "eslint-config-next": "14.2.3",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.3",
    "typescript": "^5.4.5"
  }
}


// payload-types.ts
/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    experiences: Experience;
    projects: Project;
    skills: Skill;
    media: Media;
    pages: Page;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "experiences".
 */
export interface Experience {
  id: string;
  title: string;
  location?: string | null;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  icon?: string | Media | null;
  date?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  text?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects".
 */
export interface Project {
  id: string;
  title: string;
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  tags?:
    | {
        tag?: string | null;
        id?: string | null;
      }[]
    | null;
  image?: string | Media | null;
  href?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "skills".
 */
export interface Skill {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  title?: string | null;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}

// payload.config.ts
import path from 'path'
// import { postgresAdapter } from '@payloadcms/db-postgres'
import { en } from 'payload/i18n/en'
import {
  AlignFeature,
  BlockquoteFeature,
  BlocksFeature,
  BoldFeature,
  ChecklistFeature,
  HeadingFeature,
  IndentFeature,
  InlineCodeFeature,
  ItalicFeature,
  lexicalEditor,
  LinkFeature,
  OrderedListFeature,
  ParagraphFeature,
  RelationshipFeature,
  UnorderedListFeature,
  UploadFeature,
} from '@payloadcms/richtext-lexical'
//import { slateEditor } from '@payloadcms/richtext-slate'
import { mongooseAdapter } from '@payloadcms/db-mongodb'
import { buildConfig } from 'payload/config'
import sharp from 'sharp'
import { fileURLToPath } from 'url'

const filename = fileURLToPath(import.meta.url)
const dirname = path.dirname(filename)

export default buildConfig({
  //editor: slateEditor({}),
  editor: lexicalEditor(),
  collections: [
    {
      slug: 'users',
      auth: true,
      access: {
        delete: () => false,
        update: () => false,
      },
      fields: [],
    },
    {
      slug: 'experiences',
      fields: [
        { name: 'title', type: 'text', required: true },
        { name: 'location', type: 'text' },
        { name: 'description', type: 'richText' },
        { name: 'icon', type: 'upload', relationTo: 'media' },
        { name: 'date', type: 'text' },
      ],
    },
    {
      slug: 'projects',
      fields: [
        { name: 'title', type: 'text', required: true },
        { name: 'description', type: 'richText' },
        { name: 'tags', type: 'array', label: 'Tags', fields: [{ name: 'tag', type: 'text' }] },
        { name: 'image', type: 'upload', relationTo: 'media' },
        { name: 'href', type: 'text', label: 'Website Link' },
      ],
    },
    {
      slug: 'skills',
      fields: [{ name: 'name', type: 'text', required: true, unique: true }],
    },
    {
      slug: 'media',
      upload: true,
      fields: [
        {
          name: 'text',
          type: 'text',
        },
      ],
    },
    {
      slug: 'pages',
      admin: {
        useAsTitle: 'title',
      },
      fields: [
        {
          name: 'title',
          type: 'text',
        },
        {
          name: 'content',
          type: 'richText',
        },
      ],
    },
  ],
  secret: process.env.PAYLOAD_SECRET || '',
  typescript: {
    outputFile: path.resolve(dirname, 'payload-types.ts'),
  },
  // db: postgresAdapter({
  //   pool: {
  //     connectionString: process.env.POSTGRES_URI || ''
  //   }
  // }),
  db: mongooseAdapter({
    url: process.env.MONGODB_URI || '',
  }),

  /**
   * Payload can now accept specific translations from 'payload/i18n/en'
   * This is completely optional and will default to English if not provided
   */
  i18n: {
    supportedLanguages: { en },
  },

  admin: {
    autoLogin: {
      email: 'dev@payloadcms.com',
      password: 'test',
      prefillOnly: true,
    },
  },
  async onInit(payload) {
    const existingUsers = await payload.find({
      collection: 'users',
      limit: 1,
    })

    if (existingUsers.docs.length === 0) {
      await payload.create({
        collection: 'users',
        data: {
          email: 'dev@payloadcms.com',
          password: 'test',
        },
      })
    }
  },
  // Sharp is now an optional dependency -
  // if you want to resize images, crop, set focal point, etc.
  // make sure to install it and pass it to the config.

  // This is temporary - we may make an adapter pattern
  // for this before reaching 3.0 stable
  sharp,
})


// postcss.config.js
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


// README.md
# Payload 3.0 Beta Demo

This repo showcases a demo of the Payload 3.0 Beta running completely within Next.js.

> [!IMPORTANT]
> It's extremely important to note that as of now, this demo contains BETA software and you are 100% guaranteed to run into bugs / weird stuff.
>
> We're actively working toward a stable release as fast as we possibly can.

### Highlights

1. Payload is now Next.js-native
1. Turbopack works out of the box (this will get faster over time, expect more here)
1. The Payload admin UI is built with React Server Components and automatically eliminates server-side code from your admin bundle, completely alleviating the need to use Webpack aliases to remove hooks, access control, etc.
1. Payload is now fully-ESM across the board
1. GraphQL is now initialized only when you hit the GraphQL endpoint, and does not affect overhead of REST API routes
1. All UI components have been abstracted into a separate `@payloadcms/ui` package, which will be fully documented and exposed for your re-use once we hit stable 3.0 or before
1. You can run your own Next.js site alongside of Payload in the same app
1. You can now deploy Payload to Vercel and Netlify, and there will be official support for Vercel Blob Storage and Netlify Blobs coming soon (so no S3 needed for files)
1. Server-side HMR works out of the box, with no need for `nodemon` or similar. When the Payload config changes, your app will automatically re-initialize Payload seamlessly in the background
1. All custom React components can be server components by default, and you can decide if you want them to be server components or client components
1. Sharp has been abstracted to be an optional dependency
1. Payload now relies on the Web Request / Response APIs rather than the Node Request / Response
1. Express can still be used with Next.js' Custom Server functionality
1. Payload itself has slimmed down significantly and can now be fully portable, run anywhere. You can leverage the Payload Local API completely outside of Next.js if you want.
1. The data layer, including the shape of the database Payload used and the API responses in 2.0, has not been affected whatsoever

### Work to come

We are making this available to our community so that we can gather your feedback and test the new approach that Payload is taking. Don't expect it to be fully functional yet. There are some things that we are aware of that are not yet completed, but we're going to keep blazing through the remaining items as fast as we can to reach stable 3.0 as quickly and efficiently as possible. Here are a few of the items that we are still working on (not a full list):

1. Documentation
1. Vercel Blob Storage and Netlify Blobs adapter
1. Lots of bugs for sure
1. 100% of tests passing
1. Compiler speed improvements (turbo is beta still, it is slower than it should be. it will get faster)
1. Overall speed improvements
1. An install script to be able to install Payload easily into any existing Next.js app
1. A full list of breaking changes for 2.0 -> 3.0, including an in-depth migration guide

### Existing Next.js project

You can install Payload into your existing Next.js project using this command:
```
npx create-payload-app@beta
```
Contents from `src/app` will have to be moved into a new directory `src/app/(app)` so that Payload's root layout and routes can remain isolated from the rest of your app.

### Using this repo

To try out this repo yourself, follow the steps below:

1. Clone the repo to your computer (`git clone git@github.com:payloadcms/payload-3.0-demo.git`)
2. `cd` into the new folder by running `cd ./payload-3.0-demo`
3. Copy the `.env.example` by running `cp .env.example .env` in the repo, then fill out the values including the connection string to your DB
4. Install dependencies with whatever package manager you use (`yarn`, `npm install`, `pnpm i`, etc.)
5. Start your database. For local postgresql use `.\start-database.sh` to start it in docker container.
6. Fire it up (`yarn dev`, `npm run dev`, `pnpm dev`, etc.)
7. Visit https://localhost:3000 and log in with the user created within the config's `onInit` method

### Follow along with breaking changes

There is a possibility that we will make breaking changes before releasing the full stable version of Payload 3.0.

**To follow along with breaking changes in advance of the full, stable release,** you can keep an eye on the [CHANGELOG.md](https://github.com/payloadcms/payload-3.0-demo/blob/main/CHANGELOG.md).

### Technical details

**The app folder**

You'll see that Payload requires a few files to be present in your `/app` folder. There are files for the admin UI as well as files for all route handlers. We've consolidated all admin views into a single `page.tsx` and consolidated most of the REST endpoints into a single `route.ts` file for simplicity, but also for development performance. With this pattern, you only have to compile the admin UI / REST API / GraphQL API a single time - and from there, it will be lightning-fast.

**The `next.config.js` `withPayload` function**

You'll see in the Next.js config that we have a `withPayload` function installed. This function is required for Payload to operate, and it ensures compatibility with packages that Payload needs such as `drizzle-kit`, `sharp`, `pino`, and `mongodb`.

**Using a TypeScript alias to point to your Payload config**

In the `tsconfig.json` within this repo, you'll see that we have `paths` set up to point `@payload-config` to the Payload config, which is located in the root. You can put your config wherever you want. By default, the `page.tsx` files and `route.ts` files within the `/app` folder use this alias. In the future, we might make it optional to use `paths` - and by default, we might just hard-code relative path imports to the config. We would like to hear your feedback on this part. What do you prefer? Use `paths` or just use relative imports?

---

### Find a bug?

Open an issue on this repo at `https://github.com/payloadcms/payload-3.0-demo` with as much detail as you can provide and we will tackle them as fast as we can. Let's get stable!


// start-database.sh
#!/usr/bin/env bash

DB_CONTAINER_NAME="next-payload-3"

if ! [ -x "$(command -v docker)" ]; then
  echo "Docker is not installed. Please install docker and try again.\nDocker install guide: https://docs.docker.com/engine/install/"
  exit 1
fi

if [ "$(docker ps -q -f name=$DB_CONTAINER_NAME)" ]; then
  docker start $DB_CONTAINER_NAME
  echo "Database container started"
  exit 0
fi

set -a
source .env

DB_PASSWORD=$(echo $DATABASE_URL | awk -F':' '{print $3}' | awk -F'@' '{print $1}')

if [ "$DB_PASSWORD" = "password" ]; then
  echo "You are using the default database password"
fi

docker run --name $DB_CONTAINER_NAME -e POSTGRES_PASSWORD=$DB_PASSWORD -e POSTGRES_HOST_AUTH_METHOD=trust -e POSTGRES_DB=next-payload-3 -d -p 5432:5432 docker.io/postgres

echo "Database container was successfully created"



// tailwind.config.js
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
}

// tsconfig.json
{
  "compilerOptions": {
    "baseUrl": ".",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./src/*"
      ],
      "@payload-config": [
        "./payload.config.ts"
      ]
    },
    "target": "ES2017"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}


// src\app\(app)\globals.scss

@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 20 14.3% 4.1%;

    --card: 0 0% 100%;
    --card-foreground: 20 14.3% 4.1%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 20 14.3% 4.1%;
 
    --primary: 24 9.8% 10%;
    --primary-foreground: 60 9.1% 97.8%;
 
    --secondary: 60 4.8% 95.9%;
    --secondary-foreground: 24 9.8% 10%;
 
    --muted: 60 4.8% 95.9%;
    --muted-foreground: 25 5.3% 44.7%;
 
    --accent: 60 4.8% 95.9%;
    --accent-foreground: 24 9.8% 10%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 60 9.1% 97.8%;

    --border: 20 5.9% 90%;
    --input: 20 5.9% 90%;
    --ring: 20 14.3% 4.1%;
 
    --radius: 0.5rem;
  }
 
  .dark {
    --background: 20 14.3% 4.1%;
    --foreground: 60 9.1% 97.8%;
 
    --card: 20 14.3% 4.1%;
    --card-foreground: 60 9.1% 97.8%;
 
    --popover: 20 14.3% 4.1%;
    --popover-foreground: 60 9.1% 97.8%;
 
    --primary: 60 9.1% 97.8%;
    --primary-foreground: 24 9.8% 10%;
 
    --secondary: 12 6.5% 15.1%;
    --secondary-foreground: 60 9.1% 97.8%;
 
    --muted: 12 6.5% 15.1%;
    --muted-foreground: 24 5.4% 63.9%;
 
    --accent: 12 6.5% 15.1%;
    --accent-foreground: 60 9.1% 97.8%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 60 9.1% 97.8%;
 
    --border: 12 6.5% 15.1%;
    --input: 12 6.5% 15.1%;
    --ring: 24 5.7% 82.9%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

* {
  box-sizing: border-box;
}

html {
  width: 100%;
  height: 100%;
  background-color: #000000;
}

body {
  color: #ffffff;
  margin: 0;
  display: flex;
  justify-content: center;
  align-items: center;
  width: 100%;
  padding: 0 20px;
}

main {
  position: relative;
  display: flex;
  flex-direction: column;
  justify-content: center;
  width: 100%;
  min-height: 100vh;
  max-width: 800px;
  margin: 0 auto;
  padding-block: 80px;
  border-inline-width: 1px;
  border-inline-style: solid;
  border-image: linear-gradient(180deg, #ffffff00, #ffffff00, #ffffff1a, #ffffff00) 1;

  @media screen and (max-width: 600px) {
    padding-block: 20px;
  }
}

article {
  position: relative;
  display: flex;
  flex-direction: column;
  gap: 20px;
  padding: 60px 80px;

  @media screen and (max-width: 600px) {
    padding: 40px 40px;
  }
}

.badge {
  display: flex;
  align-items: center;
  gap: 10px;
  color: #fff;
  font-size: 14px;
  font-style: normal;
  font-weight: 300;
  text-transform: uppercase;
  letter-spacing: 2.6px;
}

h1 {
  color: #ffffff;
  font-size: 4rem;
  font-weight: 600;
  line-height: normal;
  letter-spacing: -0.02rem;
  margin: 0;

  @media screen and (max-width: 600px) {
    font-size: 2rem;
  }
}

p {
  color: #ffffff;
  font-size: 16px;
  font-weight: 300;
  line-height: 28px;
  margin: 0;
}

a {
  color: #ffffff;
  text-decoration: underline;
  transition: color 0.2s ease-out;

  &:hover {
    color: #ffffff80;
  }
}

.codeBlock {
  position: relative;
  background-color: #00000066;
  margin: 0;
  padding: 0;

  pre {
    margin: 0;
    padding: 60px 80px;
    overflow-x: auto;

    @media screen and (max-width: 600px) {
      padding: 40px 40px;
    }

    &::before {
      content: '';
      display: block;
      position: absolute;
      top: 0;
      left: calc(50% - 50vw);
      width: 100vw;
      height: 1px;
      background: linear-gradient(90deg, #ffffff00, #ffffff1a, #ffffff1a, #ffffff00);
      z-index: 1;
    }

    &::after {
      content: url('/crosshair.svg');
      display: block;
      height: 19px;
      width: 19px;
      position: absolute;
      top: -9px;
      left: -10px;
    }
  }

  code {
    font-size: 14px;
    line-height: 2;
  }

  &::before {
    content: '';
    display: block;
    position: absolute;
    bottom: 0;
    left: calc(50% - 50vw);
    width: 100vw;
    height: 1px;
    background: linear-gradient(90deg, #ffffff00, #ffffff1a, #ffffff1a, #ffffff00);
    z-index: 1;
  }

  &::after {
    content: url('/crosshair.svg');
    display: block;
    height: 19px;
    width: 19px;
    position: absolute;
    bottom: -9px;
    right: -10px;
  }
}

.background {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: -1;

  div.blur {
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    background: url('/blur.png');
    background-repeat: repeat;
    background-size: 400px 400px;
    background-blend-mode: soft-light, normal;
    -webkit-backdrop-filter: blur(60px);
    backdrop-filter: blur(60px);
  }

  div.gradient {
    display: block;
    position: absolute;
    width: 100%;
    height: 100%;
    background: url('/gradient.webp');
    background-size: cover;
    background-position: center;
    z-index: -2;
  }


}
.project-card {
  margin-bottom: .5rem; /* Adjust this value as needed */
}






// src\app\(app)\layout.tsx
import React from 'react'
import { Outfit } from 'next/font/google'
import './globals.scss'

import ActiveSectionContextProvider from '@/context/active-section-context'
import Header from './_components/header'

import ThemeSwitch from './_components/theme-switch'
import ThemeContextProvider from '@/context/theme-context'
import { Toaster } from 'react-hot-toast'

const font = Outfit({ subsets: ['latin'] })

export const metadata = {
  title: 'Kenneth Courtney | Personal Portfolio',
  description: 'Ken is a full-stack developer with 15 years of experience.',
}

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="en" className="!scroll-smooth">
      <body
        className={`${font.className} bg-gray-50 text-gray-950 relative pt-28 sm:pt-36 dark:bg-gray-900 dark:text-gray-50 dark:text-opacity-90`}
      >
        <div className="bg-[#fbe2e3] absolute top-[-6rem] -z-10 right-[11rem] h-[31.25rem] w-[31.25rem] rounded-full blur-[10rem] sm:w-[68.75rem] dark:bg-[#946263]"></div>
        <div className="bg-[#dbd7fb] absolute top-[-1rem] -z-10 left-[-35rem] h-[31.25rem] w-[50rem] rounded-full blur-[10rem] sm:w-[68.75rem] md:left-[-33rem] lg:left-[-28rem] xl:left-[-15rem] 2xl:left-[-5rem] dark:bg-[#676394]"></div>

        <ThemeContextProvider>
          <ActiveSectionContextProvider>
            <Header />
            {children}

            <Toaster position="top-right" />
            <ThemeSwitch />
          </ActiveSectionContextProvider>
        </ThemeContextProvider>
      </body>
    </html>
  )
}


// src\app\(app)\page.tsx
import About from './_components/about'
import Contact from './_components/contact'
import Intro from './_components/intro'

import Projects from './_components/projects'
import SectionDivider from './_components/section-divider'
import Skills from './_components/skills'
import ProjectsServer from './_components/_projects/ProjectsServer'
import SkillsServer from './_components/_skills/SkillsServer'
import ExperiencesServer from './_components/_experiences/ExperiencesServer'
import Footer from './_components/footer'

export default function Home() {
  return (
    <main className="flex flex-col items-center px-4">
      <Intro />
      <About />
      <ProjectsServer />

      <SkillsServer />
      <ExperiencesServer />
      {/*<Contact /> */}
      <Footer />
    </main>
  )
}


// src\app\(app)\_components\about.tsx
'use client'

import React from 'react'
import SectionHeading from './section-heading'
import { motion } from 'framer-motion'
import { useSectionInView } from '@/lib/hooks'

export default function About() {
  const { ref } = useSectionInView('About')

  return (
    <motion.section
      ref={ref}
      className="mb-28 max-w-[45rem] text-center leading-8 sm:mb-40 scroll-mt-28"
      initial={{ opacity: 0, y: 100 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.175 }}
      id="about"
    >
      <SectionHeading>About me</SectionHeading>
      <div className="inline-block w-full text-justify">
        <p className="mb-3">
          As a seasoned full stack developer and .NET expert with over 20 years of experience, I
          bring a rich blend of technical acumen and innovative thinking to the forefront of
          technology development. My journey spans designing, developing, and delivering complex
          business solutions, with a specialized focus on integrating cutting-edge AI technologies.
        </p>
        <p>
          I am proficient in a diverse array of JavaScript frameworks, including NextJS, Vue 3,
          React, jQuery, AJAX, and Angular, and have deep expertise in .NET frameworks such as
          ASP.NET, VB.NET, C#, WPF, Web API, and Azure. My technical portfolio also extends to the
          DNN (DotNetNuke) platform, where I have built custom modules and enhancements,
          demonstrating my prowess in this domain.
        </p>
        <p>
          My skills in generative AI technologies set me apart in the industry. I excel in writing
          personalized Chat GPT clients and agents, fine-tuning OpenAI and other open-source LLMs.
          My proficiency in using vector encodings for document search and crafting custom
          generative AI solutions is a testament to my ability to stay ahead in the tech curve.
        </p>
        <p>
          With a strong background in database development, including Mongo, Atlas, Supabase,
          Firebase, SQL Server, T-SQL, and SQL Reporting, I bring a comprehensive skill set to the
          table. My experience in SOA and integration technologies, encompassing XML, Web Services,
          and BizTalk, further complements my technical expertise.
        </p>
        <p>
          I am eager to leverage my extensive technical expertise, leadership skills, and innovative
          approach in a hands-on technology leadership role. I am excited to explore opportunities
          where I can drive innovation and deliver exceptional results for your organization. Let's
          connect and discuss how I can contribute to your team.
        </p>
      </div>

      {false && <div className="inline-block w-full text-justify">Vapi Bot Here</div>}
    </motion.section>
  )
}


// src\app\(app)\_components\contact.tsx
'use client'

import React from 'react'
import SectionHeading from './section-heading'
import { motion } from 'framer-motion'
import { useSectionInView } from '@/lib/hooks'
import { sendEmail } from '@/actions/sendEmail'
import SubmitBtn from './submit-btn'
import { toast } from 'react-hot-toast'
import { useEffect, useState } from 'react'

export default function Contact() {
  const { ref } = useSectionInView('Contact')

  const [encodedEmail, setEncodedEmail] = useState('')

  useEffect(() => {
    const email = 'kenneth.courtney@gmail.com'
    const encoded = Array.from(email)
      .map((char) => `&#${char.charCodeAt(0)};`)
      .join('')
    setEncodedEmail(encoded)
  }, [])

  return (
    <motion.section
      id="contact"
      ref={ref}
      className="mb-20 sm:mb-28 w-[min(100%,38rem)] text-center"
      initial={{
        opacity: 0,
      }}
      whileInView={{
        opacity: 1,
      }}
      transition={{
        duration: 1,
      }}
      viewport={{
        once: true,
      }}
    >
      <SectionHeading>Contact me</SectionHeading>

      <p className="text-gray-700 -mt-6 dark:text-white/80">
        Please contact me directly at{' '}
        <a
          className="underline"
          href={`mailto:${encodedEmail}`}
          dangerouslySetInnerHTML={{ __html: encodedEmail }}
        ></a>{' '}
        or through this form.
      </p>

      <form
        className="mt-10 flex flex-col dark:text-black"
        action={async (formData) => {
          const { data, error } = await sendEmail(formData)

          if (error) {
            toast.error(error)
            return
          }

          toast.success('Email sent successfully!')
        }}
      >
        <input
          className="h-14 px-4 rounded-lg borderBlack dark:bg-white dark:bg-opacity-80 dark:focus:bg-opacity-100 transition-all dark:outline-none"
          name="senderEmail"
          type="email"
          required
          maxLength={500}
          placeholder="Your email"
        />
        <textarea
          className="h-52 my-3 rounded-lg borderBlack p-4 dark:bg-white dark:bg-opacity-80 dark:focus:bg-opacity-100 transition-all dark:outline-none"
          name="message"
          placeholder="Your message"
          required
          maxLength={5000}
        />
        <SubmitBtn />
      </form>
    </motion.section>
  )
}


// src\app\(app)\_components\experience.tsx
'use client'

import React from 'react'
import ExperiencesServer from './_experiences/ExperiencesServer'

export default function Experiences() {
  return (
    <>
      <ExperiencesServer />
    </>
  )
}


// src\app\(app)\_components\footer.tsx
import React from 'react'

export default function Footer() {
  return (
    <footer className="px-4 mb-10 text-center text-gray-500">
      <small className="block mb-2 text-xs">&copy; 2030 Ken. All rights reserved.</small>
      <p className="text-xs">
        <span className="font-semibold">About this website:</span> built with React & Next.js (App
        Router & Server Actions), TypeScript, Tailwind CSS, Framer Motion, React Email & Resend,
        Vercel hosting.
      </p>
    </footer>
  )
}


// src\app\(app)\_components\header.tsx
'use client'

import React from 'react'
import { motion } from 'framer-motion'
import { links } from '@/lib/data'
import Link from 'next/link'
import clsx from 'clsx'
import { useActiveSectionContext } from '@/context/active-section-context'

export default function Header() {
  const { activeSection, setActiveSection, setTimeOfLastClick } = useActiveSectionContext()

  return (
    <header className="z-[999] relative">
      <motion.div
        className="fixed top-0 left-1/2 h-[4.5rem] w-full rounded-none border border-white border-opacity-40 bg-white bg-opacity-80 shadow-lg shadow-black/[0.03] backdrop-blur-[0.5rem] sm:top-6 sm:h-[3.25rem] sm:w-[36rem] sm:rounded-full dark:bg-gray-950 dark:border-black/40 dark:bg-opacity-75"
        initial={{ y: -100, x: '-50%', opacity: 0 }}
        animate={{ y: 0, x: '-50%', opacity: 1 }}
      ></motion.div>

      <nav className="flex fixed top-[0.15rem] left-1/2 h-12 -translate-x-1/2 py-2 sm:top-[1.7rem] sm:h-[initial] sm:py-0">
        <ul className="flex w-[22rem] flex-wrap items-center justify-center gap-y-1 text-[0.9rem] font-medium text-gray-500 sm:w-[initial] sm:flex-nowrap sm:gap-5">
          {links.map((link) => (
            <motion.li
              className="relative flex items-center justify-center h-3/4"
              key={link.hash}
              initial={{ y: -100, opacity: 0 }}
              animate={{ y: 0, opacity: 1 }}
            >
              <Link
                href={link.hash}
                className={clsx(
                  'flex w-full items-center justify-center px-3 py-3 hover:text-gray-950 transition dark:text-gray-500 dark:hover:text-gray-300',
                  {
                    'text-gray-950 dark:text-gray-200': activeSection === link.name,
                  },
                )}
                onClick={() => {
                  setActiveSection(link.name)
                  setTimeOfLastClick(Date.now())
                }}
              >
                {link.name}

                {link.name === activeSection && (
                  <motion.span
                    className="absolute inset-0 bg-gray-100 rounded-full -z-10 dark:bg-gray-800"
                    layoutId="activeSection"
                    transition={{
                      type: 'spring',
                      stiffness: 380,
                      damping: 30,
                    }}
                  ></motion.span>
                )}
              </Link>
            </motion.li>
          ))}
        </ul>
      </nav>
    </header>
  )
}


// src\app\(app)\_components\Hero.jsx
import { Button } from '@/components/ui/button'
import Image from 'next/image'
import React from 'react'

function Hero() {
  return (
    <section>
  <div className="mx-auto max-w-screen-xl px-4 py-8 sm:px-6 sm:py-12 lg:px-8 lg:py-16">
    <div className="grid grid-cols-1 gap-8 lg:grid-cols-2 lg:gap-16">
      <div className="relative h-64 overflow-hidden rounded-lg sm:h-80 lg:order-last lg:h-full">
        <Image
          alt=""
          src="/doctors.jpg"
          width={800}
          height={800}
          className="absolute inset-0 h-full
          rounded-3xl 
          w-full object-cover"
        />
      </div>

      <div className="lg:py-24">
        <h2 className="text-4xl font-bold sm:text-4xl">
            Find & Book 
            <span className='text-primary'> Appointment </span> 
            with your Fav 
            <span className='text-primary '> Doctors</span></h2>

        <p className="mt-4 text-gray-500">
          Lorem ipsum dolor, sit amet consectetur adipisicing elit. Aut qui hic atque tenetur quis
          eius quos ea neque sunt, accusantium soluta minus veniam tempora deserunt? Molestiae eius
          quidem quam repellat.
        </p>

        <Button className="mt-10">Explore Now</Button>
      </div>
    </div>
  </div>
</section>
  )
}

export default Hero

// src\app\(app)\_components\intro.tsx
"use client";

import Image from "next/image";
import React from "react";
import { motion } from "framer-motion";
import Link from "next/link";
import { BsArrowRight, BsLinkedin } from "react-icons/bs";
import { HiDownload } from "react-icons/hi";
import { FaGithubSquare } from "react-icons/fa";
import { useSectionInView } from "@/lib/hooks";
import { useActiveSectionContext } from "@/context/active-section-context";

export default function Intro() {
  const { ref } = useSectionInView('Home', 0.5)
  const { setActiveSection, setTimeOfLastClick } = useActiveSectionContext()

  return (
    <section
      ref={ref}
      id="home"
      className="mb-28 max-w-[50rem] text-center sm:mb-0 scroll-mt-[100rem]"
    >
      <div className="flex items-center justify-center">
        <div className="relative">
          <motion.div
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{
              type: 'tween',
              duration: 0.2,
            }}
          >
            <Image
              src="/images/ken.png"
              alt="Ken portrait"
              width="512"
              height="512"
              quality="95"
              priority={true}
              className="h-512 w-512 rounded-full object-cover border-[0.35rem] border-white shadow-xl"
            />
          </motion.div>

          <motion.span
            className="absolute bottom-0 right-0 text-4xl"
            initial={{ opacity: 0, scale: 0 }}
            animate={{ opacity: 1, scale: 1 }}
            transition={{
              type: 'spring',
              stiffness: 125,
              delay: 0.1,
              duration: 0.7,
            }}
          >
            👋
          </motion.span>
        </div>
      </div>

      <motion.h1
        className="mb-10 mt-4 px-4 text-2xl font-medium !leading-[1.5] sm:text-4xl"
        initial={{ opacity: 0, y: 100 }}
        animate={{ opacity: 1, y: 0 }}
      >
        <span className="font-bold">Hello, I'm Ken.</span> I'm a{' '}
        <span className="font-bold">full-stack developer</span> with{' '}
        <span className="font-bold">15 years</span> of experience. I enjoy building{' '}
        <span className="italic">sites & apps</span>. My focus is{' '}
        <span className="underline">React (Next.js)</span>.
      </motion.h1>

      <motion.div
        className="flex flex-col sm:flex-row items-center justify-center gap-2 px-4 text-lg font-medium"
        initial={{ opacity: 0, y: 100 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{
          delay: 0.1,
        }}
      >
        <Link
          href="#contact"
          className="group bg-gray-900 text-white px-7 py-3 flex items-center gap-2 rounded-full outline-none focus:scale-110 hover:scale-110 hover:bg-gray-950 active:scale-105 transition"
          onClick={() => {
            setActiveSection('Contact')
            setTimeOfLastClick(Date.now())
          }}
        >
          Contact me here{' '}
          <BsArrowRight className="opacity-70 group-hover:translate-x-1 transition" />
        </Link>

        <a
          className="group bg-white px-7 py-3 flex items-center gap-2 rounded-full outline-none focus:scale-110 hover:scale-110 active:scale-105 transition cursor-pointer borderBlack dark:bg-white/10"
          href="/CV.pdf"
          download
          title="Download CV"
        >
          Download CV <HiDownload className="opacity-60 group-hover:translate-y-1 transition" />
        </a>

        <a
          className="bg-white p-4 text-gray-700 hover:text-gray-950 flex items-center gap-2 rounded-full focus:scale-[1.15] hover:scale-[1.15] active:scale-105 transition cursor-pointer borderBlack dark:bg-white/10 dark:text-white/60"
          href="https://www.linkedin.com/in/kendevco/"
          target="_blank"
          rel="noopener noreferrer"
          title="LinkedIn"
        >
          <BsLinkedin />
        </a>

        <a
          className="bg-white p-4 text-gray-700 flex items-center gap-2 text-[1.35rem] rounded-full focus:scale-[1.15] hover:scale-[1.15] hover:text-gray-950 active:scale-105 transition cursor-pointer borderBlack dark:bg-white/10 dark:text-white/60"
          href="https://github.com/kendevco"
          target="_blank"
          rel="noopener noreferrer"
          title="GitHub"
        >
          <FaGithubSquare />
        </a>
      </motion.div>
    </section>
  )
}


// src\app\(app)\_components\Payload.jsx
import { Badge } from '@/components/Badge'
import { Background } from '@/components/Background'
import Link from 'next/link'
import React from 'react'

export const PayloadInfo = () => {
  return (
    <>
      <main>
        <article>
          <Badge />
          <h1>Payload 3.0</h1>
          <p>
            This BETA is rapidly evolving, you can report any bugs against{' '}
            <Link href="https://github.com/payloadcms/payload-3.0-demo/issues" target="_blank">
              the repo
            </Link>{' '}
            or in the{' '}
            <Link
              href="https://discord.com/channels/967097582721572934/1215659716538273832"
              target="_blank"
            >
              dedicated channel in Discord
            </Link>
            . Payload is running at <Link href="/admin">/admin</Link>. An example of a custom route
            running the Local API can be found at <Link href="/my-route">/my-route</Link>.
          </p>
          <p>You can use the Local API in your server components like this:</p>
        </article>
        <div className="codeBlock">
          <pre>
            <code>
              {`import { getPayload } from 'payload'
                import configPromise from '@payload-config'
                const payload = await getPayload({ config: configPromise })

                const data = await payload.find({
                  collection: 'posts',
                })

                return <Posts data={data} />
                `}
            </code>
          </pre>
        </div>
      </main>
      <Background />
    </>
  )
}

// src\app\(app)\_components\projects.tsx
// src/app/(app)/_components/projects.tsx
import ProjectsServer from './_projects/ProjectsServer'

export default function Projects() {
  return (
    <div>
      <ProjectsServer />
    </div>
  )
}


// src\app\(app)\_components\section-divider.tsx
"use client";

import React from "react";
import { motion } from "framer-motion";

export default function SectionDivider() {
  return (
    <motion.div
      className="bg-gray-200 my-24 h-16 w-1 rounded-full hidden sm:block dark:bg-opacity-20"
      initial={{ opacity: 0, y: 100 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ delay: 0.125 }}
    ></motion.div>
  );
}


// src\app\(app)\_components\section-heading.tsx
import React from "react";

type SectionHeadingProps = {
  children: React.ReactNode;
};

export default function SectionHeading({ children }: SectionHeadingProps) {
  return (
    <h2 className="text-3xl font-medium capitalize mb-8 text-center">
      {children}
    </h2>
  );
}


// src\app\(app)\_components\skills.tsx
"use client";

import React from "react";
import SectionHeading from "./section-heading";
import { skillsData } from "@/lib/data";
import { useSectionInView } from "@/lib/hooks";
import { motion } from "framer-motion";

const fadeInAnimationVariants = {
  initial: {
    opacity: 0,
    y: 100,
  },
  animate: (index: number) => ({
    opacity: 1,
    y: 0,
    transition: {
      delay: 0.05 * index,
    },
  }),
};

export default function Skills() {
  const { ref } = useSectionInView("Skills");

  return (
    <section
      id="skills"
      ref={ref}
      className="mb-28 max-w-[53rem] scroll-mt-28 text-center sm:mb-40"
    >
      <SectionHeading>My skills</SectionHeading>
      <ul className="flex flex-wrap justify-center gap-2 text-lg text-gray-800">
        {skillsData.map((skill, index) => (
          <motion.li
            className="bg-white borderBlack rounded-xl px-5 py-3 dark:bg-white/10 dark:text-white/80"
            key={index}
            variants={fadeInAnimationVariants}
            initial="initial"
            whileInView="animate"
            viewport={{
              once: true,
            }}
            custom={index}
          >
            {skill}
          </motion.li>
        ))}
      </ul>
    </section>
  );
}


// src\app\(app)\_components\submit-btn.tsx
import React from 'react'
import { FaPaperPlane } from 'react-icons/fa'
import { useFormStatus } from 'react-dom'

export default function SubmitBtn() {
  const { pending } = useFormStatus()

  return (
    <button
      type="submit"
      className="group flex items-center justify-center gap-2 h-[3rem] w-[8rem] bg-gray-900 text-white rounded-full outline-none transition-all focus:scale-110 hover:scale-110 hover:bg-gray-950 active:scale-105 dark:bg-white dark:bg-opacity-10 disabled:scale-100 disabled:bg-opacity-65"
      disabled={pending}
    >
      {pending ? (
        <div className="w-5 h-5 border-b-2 border-white rounded-full animate-spin"></div>
      ) : (
        <>
          Submit{' '}
          <FaPaperPlane className="text-xs transition-all opacity-70 group-hover:translate-x-1 group-hover:-translate-y-1" />{' '}
        </>
      )}
    </button>
  )
}


// src\app\(app)\_components\theme-switch.tsx
'use client'
import { useTheme } from '@/context/theme-context'
import React, { useState } from 'react'
import { BsMoon, BsSun } from 'react-icons/bs'
import { FaArrowUp, FaUser, FaUserAlt } from 'react-icons/fa'

export default function ThemeSwitch() {
  const { theme, toggleTheme } = useTheme()
  const [isLoggedIn, setIsLoggedIn] = useState(false) // Add this state

  const scrollToTop = () => {
    window.scrollTo({ top: 0, behavior: 'smooth' })
  }

  const signIn = async () => {
    // Replace with your actual login endpoint and credentials
    const response = null

    if (response) {
      setIsLoggedIn(true)
    }
  }

  const signOut = async () => {
    // Replace with your actual logout endpoint
    const response = null

    if (response) {
      setIsLoggedIn(false)
    }
  }

  return (
    <>
      <div className="fixed flex gap-4 bottom-5 right-5">
        <button
          title="Toggle theme"
          className="bg-white w-[3rem] h-[3rem] bg-opacity-80 backdrop-blur-[0.5rem] border border-white border-opacity-40 shadow-2xl rounded-full flex items-center justify-center hover:scale-[1.15] active:scale-105 transition-all dark:bg-gray-950"
          onClick={toggleTheme}
        >
          {theme === 'light' ? <BsSun /> : <BsMoon />}
        </button>

        <button
          title="Scroll to top"
          className="bg-white w-[3rem] h-[3rem] bg-opacity-80 backdrop-blur-[0.5rem] border border-white border-opacity-40 shadow-2xl rounded-full flex items-center justify-center hover:scale-[1.15] active:scale-105 transition-all dark:bg-gray-950"
          onClick={scrollToTop}
        >
          <FaArrowUp />
        </button>

        {isLoggedIn ? (
          <button
            title="Sign out"
            onClick={signOut}
            className="bg-white w-[3rem] h-[3rem] bg-opacity-80 backdrop-blur-[0.5rem] border border-white border-opacity-40 shadow-2xl rounded-full flex items-center justify-center hover:scale-[1.15] active:scale-105 transition-all dark:bg-gray-950"
          >
            <FaUserAlt />
          </button>
        ) : (
          <button
            title="Sign in"
            onClick={signIn}
            className="bg-white w-[3rem] h-[3rem] bg-opacity-80 backdrop-blur-[0.5rem] border border-white border-opacity-40 shadow-2xl rounded-full flex items-center justify-center hover:scale-[1.15] active:scale-105 transition-all dark:bg-gray-950"
          >
            <FaUser />
          </button>
        )}
      </div>
    </>
  )
}


// src\app\(app)\_components\_experiences\ExperiencesClient.tsx
// src/ExperiencesClient.tsx
'use client'
import React from 'react'
import SectionHeading from '../section-heading'
import { VerticalTimeline, VerticalTimelineElement } from 'react-vertical-timeline-component'
import 'react-vertical-timeline-component/style.min.css'
import { useSectionInView } from '@/lib/hooks'
import { useTheme } from '@/context/theme-context'
import Image from 'next/image'
import { Experience } from '../../../../../payload-types'

export default function ExperiencesClient({ experiences }: { experiences: Experience[] }) {
  const { ref } = useSectionInView('Experience')
  const { theme } = useTheme()

  const getBackground = (isLightTheme: boolean): string => {
    return isLightTheme ? '#f3f4f6' : 'rgba(255, 255, 255, 0.05)'
  }

  const lineColor = theme === 'light' ? '#e5e7eb' : 'rgba(229, 231, 235, 0.2)'

  const isValidUrl = (url: string): boolean => {
    try {
      new URL(url)
      return true
    } catch (_) {
      return false
    }
  }

  return (
    <section id="experience" ref={ref} className="scroll-mt-28 mb-28 sm:mb-40">
      <SectionHeading>My experience</SectionHeading>
      <VerticalTimeline lineColor={lineColor}>
        {experiences.map((item, index) => {
          let descriptionText = ''
          if (item.description && item.description.root && item.description.root.children) {
            descriptionText = item.description.root.children
              .map((paragraph: any) =>
                paragraph.children.map((line: { text: string }) => line.text).join(' '),
              )
              .join(' ')
          }

          return (
            <VerticalTimelineElement
              key={index}
              className="vertical-timeline-element--work"
              contentStyle={{
                background: getBackground(theme === 'light'),
                boxShadow: 'none',
                border: `1px solid ${
                  theme === 'light' ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.5)'
                }`,
                textAlign: 'left',
                padding: '1.3rem 2rem',
              }}
              contentArrowStyle={{
                borderRight: `7px solid ${
                  theme === 'light' ? 'rgba(0, 0, 0, 0.15)' : 'rgba(255, 255, 255, 0.5)'
                }`,
              }}
              date={item.date || 'Unknown Date'} // Ensure date is a string
              icon={
                <Image
                  src={
                    typeof item.icon === 'string' && isValidUrl(item.icon)
                      ? item.icon
                      : 'https://via.placeholder.com/40'
                  }
                  alt={item.title || 'Experience Icon'}
                  className="rounded-full"
                  width={40}
                  height={40}
                />
              }
              visible={true}
            >
              <h3 className="vertical-timeline-element-title">{item.title}</h3>
              <h4 className="vertical-timeline-element-subtitle">{item.location}</h4>
              <p>{descriptionText}</p>
            </VerticalTimelineElement>
          )
        })}
      </VerticalTimeline>
    </section>
  )
}


// src\app\(app)\_components\_experiences\ExperiencesServer.tsx
// src/app/(app)/_components/_experiences/ExperiencesServer.tsx
import React from 'react'
import config from '../../../../../payload.config'
import ExperiencesClient from './ExperiencesClient'
import { Experience } from '../../../../../payload-types'
import { getPayloadHMR } from '@payloadcms/next/utilities'

export default async function ExperiencesServer() {
  // Initialize payload
  const payload = await getPayloadHMR({ config })

  // Fetch experiences
  const experiences = await payload.find({ collection: 'experiences' })

  // Format experiences
  const formattedExperiences: Experience[] = experiences.docs.map((experience) => {
    return {
      id: experience.id,
      title: experience.title,
      location: experience.location || undefined, // Ensure 'location' is of type 'string | undefined'
      date: experience.date,
      description: experience.description,
      icon: experience.icon,
      createdAt: experience.createdAt,
      updatedAt: experience.updatedAt,
    } as Experience
  })

  // Render ExperiencesClient component with the fetched data
  return <ExperiencesClient experiences={formattedExperiences} />
}


// src\app\(app)\_components\_projects\project.tsx
// src/app/(app)/_components/Project.tsx
'use client'

import { useRef } from 'react'
import Image from 'next/image'
import { motion, useScroll, useTransform } from 'framer-motion'
import { CardContainer, CardBody, CardItem } from '@/components/ui/3d-card'

type ProjectProps = {
  id: string
  title: string
  description: {
    root: {
      children: Array<{
        children: Array<{
          text: string
        }>
      }>
    }
  }
  tags: { tag: string; id: string }[]
  image: {
    url: string
    text: string
    width: number
    height: number
  }
  href: string
}

export default function Project({ title, description, tags, image, href }: ProjectProps) {
  const ref = useRef<HTMLDivElement>(null)
  const { scrollYProgress } = useScroll({
    target: ref,
    offset: ['0 1', '1.33 1'],
  })
  const scaleProgress = useTransform(scrollYProgress, [0, 1], [0.8, 1])
  const opacityProgress = useTransform(scrollYProgress, [0, 1], [0.6, 1])

  // Extract description text
  const descriptionText = description.root.children
    .map((paragraph) => paragraph.children.map((line) => line.text).join(' '))
    .join(' ')

  return (
    <motion.div
      ref={ref}
      style={{
        scale: scaleProgress,
        opacity: opacityProgress,
      }}
      className="mb-8 group sm:mb-12 last:mb-0"
    >
      <CardContainer containerClassName="w-full h-full grid grid-cols-1" className="h-full">
        <CardBody className="h-full">
          <CardItem translateZ={60} className="relative w-full h-64">
            <Image
              src={image.url}
              alt={image.text}
              layout="fill"
              objectFit="cover"
              className="rounded-t-lg shadow-2xl"
            />
          </CardItem>
          <CardItem className="flex flex-col w-full h-full px-5 pt-4 pb-7">
            <h3 className="text-2xl font-semibold">{title}</h3>
            <p className="mt-2 leading-relaxed text-gray-700 dark:text-white/70">
              {descriptionText}
            </p>
            <ul className="flex flex-wrap gap-2 mt-4">
              {tags.map((tag) => (
                <li
                  className="bg-black/[0.7] px-3 py-1 text-[0.7rem] uppercase tracking-wider text-white rounded-full dark:text-white/70"
                  key={tag.id} // Ensure each tag has a unique key
                >
                  {tag.tag}
                </li>
              ))}
            </ul>
            {href && (
              <a
                href={href}
                className="px-4 py-2 mt-4 text-white transition bg-blue-500 rounded-md hover:bg-blue-600"
              >
                Visit Website
              </a>
            )}
          </CardItem>
        </CardBody>
      </CardContainer>
    </motion.div>
  )
}


// src\app\(app)\_components\_projects\ProjectsClient.tsx
// src/app/(app)/_components/ProjectsClient.tsx
'use client'

import React from 'react'
import { useSectionInView } from '@/lib/hooks'
import SectionHeading from '../section-heading'
import ProjectComponent from './project'

type Project = {
  id: string
  title: string
  description: {
    root: {
      children: Array<{
        children: Array<{
          text: string
        }>
      }>
    }
  }
  tags: { tag: string; id: string }[]
  image: {
    url: string
    text: string
  }
  href: string
}

// src/app/(app)/_components/_projects/ProjectsClient.tsx
export default function ProjectsClient({ projects }: { projects: Project[] }) {
  const { ref } = useSectionInView('Projects', 0.5)

  return (
    <section ref={ref} id="projects" className="scroll-mt-28 mb-28">
      <SectionHeading>My projects</SectionHeading>
      <div className="grid grid-cols-1 gap-4 sm:grid-cols-2">
        {' '}
        {/* Adjust gap as needed */}
        {projects.map((project) => (
          <React.Fragment key={project.id}>
            <ProjectComponent {...project} />
          </React.Fragment>
        ))}
      </div>
    </section>
  )
}


// src\app\(app)\_components\_projects\ProjectsServer.tsx
// src/app/(app)/_components/ProjectsServer.tsx
import React from 'react'
import config from '../../../../../payload.config'
import { getPayloadHMR } from '@payloadcms/next/utilities'
import { Project } from '../../../../../payload-types'
import ProjectsClient from './ProjectsClient'

export default async function ProjectsServer() {
  // Initialize payload
  const payload = await getPayloadHMR({ config })

  // Fetch projects with pagination
  const limit = 100 // Set a reasonable limit for the number of documents to fetch per page
  let projects: Project[] = []
  let skip = 0

  while (true) {
    const result = await payload.find({
      collection: 'projects',
      limit,
      skip,
    })

    // Add the fetched documents to the projects array
    projects = [...projects, ...result.docs]
    skip += limit

    // Break the loop if the number of documents returned is less than the limit
    if (result.docs.length < limit) {
      break
    }

    // Safeguard: break the loop if we have fetched a very large number of documents
    if (skip > 10000) {
      console.warn(
        'Fetched more than 10,000 documents, breaking the loop to avoid potential infinite loop.',
      )
      break
    }
  }

  // Render ProjectsClient component with the fetched data
  return <ProjectsClient projects={projects} />
}


// src\app\(app)\_components\_skills\index.tsx
// src/app/(app)/_components/_skills/index.tsx
import React from 'react'
import SkillsServer from './SkillsServer'

export default function Skills() {
  return (
    <div>
      <SkillsServer />
    </div>
  )
}


// src\app\(app)\_components\_skills\SkillsClient.tsx
// src/app/(app)/_components/_skills/SkillsClient.tsx
'use client'

import React from 'react'
import SectionHeading from '../section-heading'
import { motion } from 'framer-motion'
import { useSectionInView } from '@/lib/hooks'

type Skill = {
  id: string
  name: string
}

const fadeInAnimationVariants = {
  initial: { opacity: 0, y: 100 },
  animate: (index: number) => ({
    opacity: 1,
    y: 0,
    transition: { delay: 0.05 * index },
  }),
}

export default function SkillsClient({ skills }: { skills: Skill[] }) {
  const { ref } = useSectionInView('Skills')

  return (
    <section
      id="skills"
      ref={ref}
      className="mb-28 max-w-[53rem] scroll-mt-28 text-center sm:mb-40"
    >
      <SectionHeading>My skills</SectionHeading>
      <ul className="flex flex-wrap justify-center gap-2 text-lg text-gray-800">
        {skills.map((skill, index) => (
          <motion.li
            className="px-5 py-3 bg-white borderBlack rounded-xl dark:bg-white/10 dark:text-white/80"
            key={index}
            variants={fadeInAnimationVariants}
            initial="initial"
            whileInView="animate"
            viewport={{ once: true }}
            custom={index}
          >
            {skill.name}
          </motion.li>
        ))}
      </ul>
    </section>
  )
}


// src\app\(app)\_components\_skills\SkillsServer.tsx
// src/app/(app)/_components/_skills/SkillsServer.tsx
import React from 'react'
import config from '../../../../../payload.config'
import { getPayloadHMR } from '@payloadcms/next/utilities'
import { Skill } from '../../../../../payload-types'
import SkillsClient from './SkillsClient'

export default async function SkillsServer() {
  // Initialize payload
  const payload = await getPayloadHMR({ config })

  // Fetch skills with pagination
  const limit = 100 // Set a reasonable limit for the number of documents to fetch per page
  let skills: Skill[] = []
  let skip = 0

  while (true) {
    const result = await payload.find({
      collection: 'skills',
      limit,
      skip,
    })

    // Add the fetched documents to the skills array
    skills = [...skills, ...result.docs]
    skip += limit

    // Break the loop if the number of documents returned is less than the limit
    if (result.docs.length < limit) {
      break
    }

    // Safeguard: break the loop if we have fetched a very large number of documents
    if (skip > 10000) {
      console.warn(
        'Fetched more than 10,000 documents, breaking the loop to avoid potential infinite loop.',
      )
      break
    }
  }

  // Render SkillsClient component with the fetched data
  return <SkillsClient skills={skills} />
}


// src\app\my-route\route.ts
import { getPayloadHMR } from '@payloadcms/next/utilities'
import configPromise from '@payload-config'

export const GET = async () => {
  const payload = await getPayloadHMR({
    config: configPromise,
  })

  const data = await payload.find({
    collection: 'users',
  })

  return Response.json(data)
}


// src\collections\Experiences.ts
import type { CollectionConfig } from 'payload/types'

export const Experiences: CollectionConfig = {
  slug: 'experiences',
  admin: {
    useAsTitle: 'title',
  },
  fields: [
    {
      name: 'title',
      type: 'text',
      required: true,
    },
    {
      name: 'location',
      type: 'text',
    },
    {
      name: 'description',
      type: 'textarea',
    },
    {
      name: 'icon',
      type: 'upload',
      relationTo: 'media',
    },
    {
      name: 'date',
      type: 'text',
    },
  ],
}


// src\collections\Pages.ts
export const Pages = {
  slug: 'pages',
  fields: [
    {
      name: 'slug',
      type: 'text',
      label: 'Slug',
      required: true,
      admin: {
        position: 'sidebar',
      },
    },
    {
      name: 'internalName',
      type: 'text',
      label: 'Internal Name',
      required: true,
    },
    {
      name: 'layout',
      type: 'blocks',
      label: 'Layout',
      blocks: [],
    },
  ],
}


// src\collections\Projects.ts
import type { CollectionConfig } from 'payload/types'

export const Projects: CollectionConfig = {
  slug: 'projects',
  admin: {
    useAsTitle: 'title',
  },
  fields: [
    {
      name: 'title',
      type: 'text',
      required: true,
    },
    {
      name: 'description',
      type: 'textarea',
    },
    {
      name: 'tags',
      type: 'array',
      fields: [
        {
          name: 'tag',
          type: 'text',
        },
      ],
    },
    {
      name: 'href',
      type: 'text',
    },
  ],
}


// src\collections\Skills.ts
import type { CollectionConfig } from 'payload/types'

export const Skills: CollectionConfig = {
  slug: 'skills',
  admin: {
    useAsTitle: 'name',
  },
  fields: [
    {
      name: 'name',
      type: 'text',
      required: true,
    },
  ],
}


// src\collections\Users.ts
import type { CollectionConfig } from 'payload/types'

export const Users: CollectionConfig = {
  slug: 'users',
  admin: {
    useAsTitle: 'email',
  },
  auth: true,
  fields: [
    // Email added by default
    // Add more fields as needed
  ],
}


// src\components\Background.tsx
export const Background = () => {
  return (
    <div className="background">
      <div className="blur" />
      <div className="gradient" />
    </div>
  )
}


// src\components\Badge.tsx
export const Badge = () => {
  return (
    <span className="badge">
      <svg
        width="20"
        height="20"
        viewBox="0 0 20 20"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M9.35899 1.59033L16.956 6.233V15.0452L11.2355 18.4097V9.59751L3.62941 4.96095L9.35899 1.59033Z"
          fill="#ffffff"
        />
        <path d="M8.77667 17.9211V11.0447L3.04407 14.4153L8.77667 17.9211Z" fill="#ffffff" />
      </svg>
      Beta
    </span>
  )
}


// src\components\Example.tsx
import React from 'react'
import { getPayloadHMR } from '@payloadcms/next/utilities'
import configPromise from '@payload-config'

const Example: React.FC = async () => {
  const payload = await getPayloadHMR({ config: configPromise })
  const url = payload.getAdminURL()
  return <div>The admin panel is running at: {url}</div>
}

export default Example


// src\components\ui\3d-card.tsx
'use client'

import { cn } from '@/lib/utils'
import Image from 'next/image'
import React, { createContext, useState, useContext, useRef, useEffect } from 'react'

const MouseEnterContext = createContext<
  [boolean, React.Dispatch<React.SetStateAction<boolean>>] | undefined
>(undefined)

export const CardContainer = ({
  children,
  className,
  containerClassName,
}: {
  children?: React.ReactNode
  className?: string
  containerClassName?: string
}) => {
  const containerRef = useRef<HTMLDivElement>(null)
  const [isMouseEntered, setIsMouseEntered] = useState(false)

  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current) return
    const { left, top, width, height } = containerRef.current.getBoundingClientRect()
    const x = (e.clientX - left - width / 2) / 25
    const y = (e.clientY - top - height / 2) / 25
    containerRef.current.style.transform = `rotateY(${x}deg) rotateX(${y}deg)`
  }

  const handleMouseEnter = (e: React.MouseEvent<HTMLDivElement>) => {
    setIsMouseEntered(true)
    if (!containerRef.current) return
  }

  const handleMouseLeave = (e: React.MouseEvent<HTMLDivElement>) => {
    if (!containerRef.current) return
    setIsMouseEntered(false)
    containerRef.current.style.transform = `rotateY(0deg) rotateX(0deg)`
  }
  return (
    <MouseEnterContext.Provider value={[isMouseEntered, setIsMouseEntered]}>
      <div
        className={cn('py-20 flex items-center justify-center', containerClassName)}
        style={{
          perspective: '1000px',
        }}
      >
        <div
          ref={containerRef}
          onMouseEnter={handleMouseEnter}
          onMouseMove={handleMouseMove}
          onMouseLeave={handleMouseLeave}
          className={cn(
            'flex items-center justify-center relative transition-all duration-200 ease-linear',
            className,
          )}
          style={{
            transformStyle: 'preserve-3d',
          }}
        >
          {children}
        </div>
      </div>
    </MouseEnterContext.Provider>
  )
}

export const CardBody = ({
  children,
  className,
}: {
  children: React.ReactNode
  className?: string
}) => {
  return (
    <div
      className={cn(
        'h-96 w-96 [transform-style:preserve-3d]  [&>*]:[transform-style:preserve-3d]',
        className,
      )}
    >
      {children}
    </div>
  )
}

export const CardItem = ({
  as: Tag = 'div',
  children,
  className,
  translateX = 0,
  translateY = 0,
  translateZ = 0,
  rotateX = 0,
  rotateY = 0,
  rotateZ = 0,
  ...rest
}: {
  as?: React.ElementType
  children: React.ReactNode
  className?: string
  translateX?: number | string
  translateY?: number | string
  translateZ?: number | string
  rotateX?: number | string
  rotateY?: number | string
  rotateZ?: number | string
  [key: string]: any
}) => {
  const ref = useRef<HTMLDivElement>(null)
  const [isMouseEntered] = useMouseEnter()

  useEffect(() => {
    handleAnimations()
  }, [isMouseEntered])

  const handleAnimations = () => {
    if (!ref.current) return
    if (isMouseEntered) {
      ref.current.style.transform = `translateX(${translateX}px) translateY(${translateY}px) translateZ(${translateZ}px) rotateX(${rotateX}deg) rotateY(${rotateY}deg) rotateZ(${rotateZ}deg)`
    } else {
      ref.current.style.transform = `translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg)`
    }
  }

  return (
    <Tag ref={ref} className={cn('w-fit transition duration-200 ease-linear', className)} {...rest}>
      {children}
    </Tag>
  )
}

// Create a hook to use the context
export const useMouseEnter = () => {
  const context = useContext(MouseEnterContext)
  if (context === undefined) {
    throw new Error('useMouseEnter must be used within a MouseEnterProvider')
  }
  return context
}


// src\components\ui\button.tsx
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default: "bg-primary text-primary-foreground hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground hover:bg-destructive/90",
        outline:
          "border border-input bg-background hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-10 px-4 py-2",
        sm: "h-9 rounded-md px-3",
        lg: "h-11 rounded-md px-8",
        icon: "h-10 w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }


// src\context\active-section-context.tsx
"use client";

import type { SectionName } from "@/lib/types";
import React, { useState, createContext, useContext } from "react";

type ActiveSectionContextProviderProps = {
  children: React.ReactNode;
};

type ActiveSectionContextType = {
  activeSection: SectionName;
  setActiveSection: React.Dispatch<React.SetStateAction<SectionName>>;
  timeOfLastClick: number;
  setTimeOfLastClick: React.Dispatch<React.SetStateAction<number>>;
};

export const ActiveSectionContext =
  createContext<ActiveSectionContextType | null>(null);

export default function ActiveSectionContextProvider({
  children,
}: ActiveSectionContextProviderProps) {
  const [activeSection, setActiveSection] = useState<SectionName>("Home");
  const [timeOfLastClick, setTimeOfLastClick] = useState(0); // we need to keep track of this to disable the observer temporarily when user clicks on a link

  return (
    <ActiveSectionContext.Provider
      value={{
        activeSection,
        setActiveSection,
        timeOfLastClick,
        setTimeOfLastClick,
      }}
    >
      {children}
    </ActiveSectionContext.Provider>
  );
}

export function useActiveSectionContext() {
  const context = useContext(ActiveSectionContext);

  if (context === null) {
    throw new Error(
      "useActiveSectionContext must be used within an ActiveSectionContextProvider"
    );
  }

  return context;
}


// src\context\theme-context.tsx
"use client";

import React, { useEffect, useState, createContext, useContext } from "react";

type Theme = "light" | "dark";

type ThemeContextProviderProps = {
  children: React.ReactNode;
};

type ThemeContextType = {
  theme: Theme;
  toggleTheme: () => void;
};

const ThemeContext = createContext<ThemeContextType | null>(null);

export default function ThemeContextProvider({
  children,
}: ThemeContextProviderProps) {
  const [theme, setTheme] = useState<Theme>("dark");

  const toggleTheme = () => {
    if (theme === "light") {
      setTheme("dark");
      window.localStorage.setItem("theme", "dark");
      document.documentElement.classList.add("dark");
    } else {
      setTheme("light");
      window.localStorage.setItem("theme", "light");
      document.documentElement.classList.remove("dark");
    }
  };

  useEffect(() => {
    const localTheme = window.localStorage.getItem("theme") as Theme | null;

    if (localTheme) {
      setTheme(localTheme);

      if (localTheme === "dark") {
        document.documentElement.classList.add("dark");
      }
    } else if (window.matchMedia("(prefers-color-scheme: dark)").matches) {
      setTheme("dark");
      document.documentElement.classList.add("dark");
    }
  }, []);

  return (
    <ThemeContext.Provider
      value={{
        theme,
        toggleTheme,
      }}
    >
      {children}
    </ThemeContext.Provider>
  );
}

export function useTheme() {
  const context = useContext(ThemeContext);

  if (context === null) {
    throw new Error("useTheme must be used within a ThemeContextProvider");
  }

  return context;
}


// src\email\contact-form-email.tsx
import React from "react";
import {
  Html,
  Body,
  Head,
  Heading,
  Hr,
  Container,
  Preview,
  Section,
  Text,
} from "@react-email/components";
import { Tailwind } from "@react-email/tailwind";

type ContactFormEmailProps = {
  message: string;
  senderEmail: string;
};

export default function ContactFormEmail({
  message,
  senderEmail,
}: ContactFormEmailProps) {
  return (
    <Html>
      <Head />
      <Preview>New message from your portfolio site</Preview>
      <Tailwind>
        <Body className="bg-gray-100 text-black">
          <Container>
            <Section className="bg-white borderBlack my-10 px-10 py-4 rounded-md">
              <Heading className="leading-tight">
                You received the following message from the contact form
              </Heading>
              <Text>{message}</Text>
              <Hr />
              <Text>The sender's email is: {senderEmail}</Text>
            </Section>
          </Container>
        </Body>
      </Tailwind>
    </Html>
  );
}


// src\lib\data.ts
import React from 'react'
import { FaAnchor, FaDatabase, FaDotCircle, FaReact } from 'react-icons/fa'

export const links = [
  {
    name: 'Home',
    hash: '#home',
  },
  {
    name: 'About',
    hash: '#about',
  },
  {
    name: 'Projects',
    hash: '#projects',
  },
  {
    name: 'Skills',
    hash: '#skills',
  },
  {
    name: 'Experience',
    hash: '#experience',
  },
  {
    name: 'Contact',
    hash: '#contact',
  },
] as const

export const experiencesData = [
  {
    title: 'DNN Subject Matter Expert',
    location: 'Remote',
    description:
      'Led technical management and maintenance for 35 standalone DNN websites hosting 50+ custom healthcare web apps, demanding expertise in DNN/MVC frameworks. Orchestrated upgrade of 20 sites from DNN 8 to 9, migrating to Windows Server 2019. Demonstrated leadership in complex migrations.',
    icon: React.createElement(FaReact),
    date: 'Mar 2021 - Present',
  },
  {
    title: 'Independent Developer',
    location: 'Tampa, FL',
    description:
      'Supported and maintained custom DNN modules including document management system, gallery module, store module developed for Advantage International and rebranded to KenDev.Co.',
    icon: React.createElement(FaDotCircle),
    date: 'May 2015 - Apr 2021',
  },
  {
    title: 'Senior .NET Consultant',
    location: 'Tampa, FL',
    description:
      'Integrated two separate DNN websites operating on different versions, upgraded both sites to latest version 4.9.2. Upgraded commercial Portal Store module. Combined 10,000+ user accounts from sites into new consolidated site.',
    icon: React.createElement(FaDatabase),
    date: 'Feb 2009 - May 2015',
  },
  {
    title: 'DotNetNuke Architect',
    location: 'Tampa, FL',
    description:
      'Architected social networking site on DNN and .NET 3.5 for tracking favorite sports teams and fantasy leagues. Developed custom DNN modules for forums, messaging, surveys, analytics. Integrated sports stats feed.',
    icon: React.createElement(FaDatabase),
    date: 'Sep 2008 - Nov 2008',
  },
  {
    title: 'Internal Systems Architect',
    location: 'Tampa, FL',
    description:
      'Enhanced LOB ERP system used by 500+ sales reps to add order return capabilities, streamlining process. Led major CRM integration project to create 360 customer view across 10 core business systems.',
    icon: React.createElement(FaDatabase),
    date: 'Jun 2006 - Oct 2008',
  },

  {
    title: 'Senior .NET Developer',
    location: 'Tampa, FL',
    description:
      "Developed 'pluggable' WinForms apps using .NET for project management system. Created Windows Services framework for batch processing and message queueing. Published work on Mainframe report processing tool.",
    icon: React.createElement(FaDatabase),
    date: 'Feb 2006 - Jun 2006',
  },
  {
    title: 'Senior .NET Developer',
    location: 'Tampa, FL',
    description:
      'Developed SOA integrations using ASP.NET Web Services and XML transformations on proprietary middleware platform.',
    icon: React.createElement(FaDatabase),
    date: 'Nov 2005 - Feb 2006',
  },
  {
    title: 'Senior .NET Developer',
    location: 'Tampa, FL',
    description:
      'Developed and maintained N-Tier OLTP student information system managing 100,000+ students. Technical lead for student administration system. Integrated with SAP accounting system.',
    icon: React.createElement(FaDatabase),
    date: 'Jan 2004 - Nov 2005',
  },
  {
    title: 'Mortgage Software Engineer',
    location: 'Tampa, FL',
    description:
      'Member of team focused on N-Tier enterprise mortgage underwriting analysis app. Provided analysis to transform business rules into coded solutions. Authored technical documentation.',
    icon: React.createElement(FaDatabase),
    date: 'Mar 2001 - Jan 2003',
  },
  {
    title: 'Software Developer',
    location: 'St Petersburg, FL',
    description:
      'Designed and developed solutions utilizing VB, ASP, COM+, SQL Server. Integrated ecommerce sites with payment systems. Implemented order fulfillment, inventory management, and data synchronization.',
    icon: React.createElement(FaDatabase),
    date: 'Jan 2000 - Jan 2001',
  },
  {
    title: "Navy Machinist's Mate",
    location: 'United States',
    description:
      'Operated, maintained, and tested components on nuclear submarine. Qualified for all watchstations of Naval Nuclear Propulsion Plant. Assisted in submarine decommissioning.',
    icon: React.createElement(FaAnchor),
    date: 'Jan 1991 - Oct 1994',
  },
]

export const projectsData = [
  {
    title: 'Discordant',
    description:
      'Full featured Discord clone with 1-1 voice and video calling, Clerk authentication, Upload Thing file repository, and more.',
    tags: ['React', 'TypeScript', 'Next.js', 'Tailwind', 'Redux'],
    imageUrl: 'discordantImg',
    href: 'https://discordant.kendev.co/',
  },

  {
    title: 'Next LMS',
    description:
      'Next LMS is a powerful and flexible learning management system with user management, dark mode, error handling for video upload, and a variety of other features by Code with Antonio.',
    tags: ['React', 'Next.js', 'MongoDB', 'Tailwind', 'Prisma'],
    imageUrl: 'discordantImg',
    href: 'https://lms.kendev.co',
  },
  {
    title: 'Notion Clone',
    description:
      'A personal clone of Notion, plus enhancements for personal use by Code with Antonio.',
    tags: ['React', 'Next.js', 'Mongo', 'Tailwind', 'Prisma'],
    imageUrl: 'discordantImg',
    href: 'https://notes.kendev.co/',
  },
  {
    title: 'Next Commerce',
    description:
      'A fullstack commerce solution with separate admin dashboard by Code with Antonio.',
    tags: ['React', 'Next.js', 'Mongo', 'Tailwind', 'Prisma'],
    imageUrl: 'discordantImg',
    href: 'https://next-commerce-store.kendev.co/',
  },
] as const

export const skillsData = [
  // Web Development
  'HTML',
  'CSS',
  'JavaScript',
  'TypeScript',
  'React',
  'React.js',
  'Node.js',
  'Next.js',
  'Vue.js',
  'Web Design',
  'Responsive Web Design',
  'Cascading Style Sheets (CSS)',

  // Backend Development
  'ASP.NET',
  'ASP.NET MVC',
  'Python',
  'Django',
  'SQL',
  'PL/SQL',
  'Prisma',
  'App.Write',
  'GraphQL',
  'PostgreSQL',
  'MongoDB',
  'Databases',
  'ADO.NET',

  // DevOps
  'Git',
  'Windows Server',
  'Windows Server Administration',
  'Internet Information Services (IIS)',
  'Microsoft SQL Server',

  // .NET Framework
  'C#',
  '.NET Framework',
  'Microsoft Visual Studio.NET',
  'Visual Studio Code',
  'Visual Basic',
  'DotNetNuke (DNN)',

  // Project Management
  'Scrum',
  'Microsoft Project',
  'Visio',
  'Documentation',

  // Debugging and Performance
  'Debugging',
  'Dynatrace',

  // UI/UX
  'Framer Motion',
  'Tailwind',
  'Redux',

  // Version Control
  'Microsoft Visual Source Safe',
] as const


// src\lib\hooks.ts
import { useActiveSectionContext } from "@/context/active-section-context";
import { useEffect } from "react";
import { useInView } from "react-intersection-observer";
import type { SectionName } from "./types";

export function useSectionInView(sectionName: SectionName, threshold = 0.75) {
  const { ref, inView } = useInView({
    threshold,
  });
  const { setActiveSection, timeOfLastClick } = useActiveSectionContext();

  useEffect(() => {
    if (inView && Date.now() - timeOfLastClick > 1000) {
      setActiveSection(sectionName);
    }
  }, [inView, setActiveSection, timeOfLastClick, sectionName]);

  return {
    ref,
  };
}


// src\lib\types.ts
import { links } from "./data";

export type SectionName = (typeof links)[number]["name"];


// src\lib\utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


// src\scripts\standalone-script.js
/**
 * This is an example of a standalone script that loads in the Payload config
 * and uses the Payload Local API to query the database.
 */

import { getPayload } from 'payload'
import { importConfig } from 'payload/node'
import 'dotenv/config'

async function run() {
  const awaitedConfig = await importConfig('../../payload.config.ts')
  const payload = await getPayload({ config: awaitedConfig })

  const pages = await payload.find({
    collection: 'pages',
  })

  console.log(pages)
  process.exit(0)
}

run().catch(console.error)


